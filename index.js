import { ethers } from "ethers";
import dotenv from "dotenv";
import fs from "fs";
import chalk from "chalk";
import figlet from "figlet";
import solc from "solc";
import path from "path";
import { exit } from "process";
dotenv.config();

const provider = new ethers.JsonRpcProvider(process.env.RPC_URL);
const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

let savedOption = null; // T√πy ch·ªçn ƒë√£ l∆∞u
let savedTransactionCount = null; // S·ªë l∆∞·ª£ng giao d·ªãch ƒë√£ l∆∞u

// H√†m hi·ªÉn th·ªã banner ASCII
function showBanner() {
    console.clear();
    console.log(chalk.blueBright(figlet.textSync("NT - Exhaust", { horizontalLayout: "fitted" })));
    console.log(chalk.greenBright("üî• ƒê∆∞·ª£c t·∫°o b·ªüi NT - Exhaust üî•"));
    console.log(chalk.greenBright("üî• Telegram: https://t.me/@NTExhaust üî•\n"));
}

// H√†m l·∫•y v√† hi·ªÉn th·ªã th√¥ng tin v√≠
async function showWalletInfo() {
    const balance = await provider.getBalance(wallet.address);
    console.log(chalk.yellow("üí≥ Th√¥ng tin v√≠"));
    console.log(chalk.cyan(`üîπ ƒê·ªãa ch·ªâ: ${wallet.address}`));
    console.log(chalk.green(`üîπ S·ªë d∆∞: ${ethers.formatEther(balance)} ETH\n`));
}

// H√†m bi√™n d·ªãch v√† tri·ªÉn khai h·ª£p ƒë·ªìng
async function deployContract() {
    const contractPath = path.resolve("auto.sol");

    if (!fs.existsSync(contractPath)) {
        console.log(chalk.red(`‚ùå T·ªáp ${contractPath} kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y.`));
        return;
    }

    const contractSource = fs.readFileSync(contractPath, "utf8");

    function findImports(importPath) {
        const fullPath = path.resolve("node_modules", importPath);
        if (fs.existsSync(fullPath)) {
            return { contents: fs.readFileSync(fullPath, "utf8") };
        } else {
            return { error: "T·ªáp kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y" };
        }
    }

    const input = {
        language: "Solidity",
        sources: {
            "auto.sol": { content: contractSource }
        },
        settings: {
            outputSelection: { "*": { "*": ["abi", "evm.bytecode.object"] } }
        }
    };

    const output = JSON.parse(solc.compile(JSON.stringify(input), { import: findImports }));

    const contractName = Object.keys(output.contracts["auto.sol"])[0];
    const contractData = output.contracts["auto.sol"][contractName];

    if (!contractData.evm.bytecode.object) {
        console.log(chalk.red(`‚ùå Bi√™n d·ªãch th·∫•t b·∫°i! Ki·ªÉm tra m√£ Solidity.`));
        return;
    }

    const contractFactory = new ethers.ContractFactory(contractData.abi, contractData.evm.bytecode.object, wallet);

    console.log(chalk.yellow("‚è≥ ƒêang tri·ªÉn khai h·ª£p ƒë·ªìng..."));
    try {
        const contract = await contractFactory.deploy("MyToken", "MTK", 1000000, wallet.address);
        await contract.waitForDeployment();

        console.log(chalk.green(`‚úÖ H·ª£p ƒë·ªìng ƒë√£ ƒë∆∞·ª£c tri·ªÉn khai! ƒê·ªãa ch·ªâ: ${chalk.blue(await contract.getAddress())}`));
    } catch (error) {
        console.log(chalk.red(`‚ùå Tri·ªÉn khai th·∫•t b·∫°i: ${error.message}`));
    }

    console.log(chalk.greenBright("\nüéâ Ho√†n t·∫•t tri·ªÉn khai! (Kh√¥ng l·∫∑p l·∫°i)\n"));
    process.exit(0);
}

// H√†m x·ª≠ l√Ω c√°c giao d·ªãch t·ª± ƒë·ªông
async function autoTransaction() {
    let option = savedOption;
    let transactionCount = savedTransactionCount;

    if (option === null || transactionCount === null) {
        option = await askQuestion(chalk.magenta("\nCh·ªçn t√πy ch·ªçn giao d·ªãch (1: ƒê·ªãa ch·ªâ ƒë·ªët, 2: V√≠ KYC): "));
        transactionCount = await askQuestion(chalk.magenta("Nh·∫≠p s·ªë l∆∞·ª£ng giao d·ªãch: "));

        savedOption = option;
        savedTransactionCount = Number(transactionCount);
    }

    const file = option === "1" ? "burnAddress.txt" : "KycAddress.txt";

    if (!fs.existsSync(file)) {
        console.log(chalk.red(`‚ùå T·ªáp ${file} kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y.`));
        return;
    }

    const addresses = fs.readFileSync(file, "utf-8").split("\n").map(addr => addr.trim()).filter(addr => addr);

    console.log(chalk.yellow("\nüöÄ B·∫Øt ƒë·∫ßu giao d·ªãch...\n"));

    for (let i = 0; i < savedTransactionCount; i++) {
        const recipient = addresses[Math.floor(Math.random() * addresses.length)];
        const amount = (Math.random() * (0.09 - 0.01) + 0.01).toFixed(4);

        console.log(chalk.blueBright(`üîπ Giao d·ªãch ${i + 1}/${savedTransactionCount}`));
        console.log(chalk.cyan(`‚û° G·ª≠i ${chalk.green(amount + " ETH")} ƒë·∫øn ${chalk.yellow(recipient)}`));

        try {
            const tx = await wallet.sendTransaction({
                to: recipient,
                value: ethers.parseEther(amount)
            });

            console.log(chalk.green(`‚úÖ Th√†nh c√¥ng! M√£ giao d·ªãch: ${chalk.blue(tx.hash)}`));
            await tx.wait();
        } catch (error) {
            console.log(chalk.red(`‚ùå Giao d·ªãch th·∫•t b·∫°i: ${error.message}`));
        }

        console.log(chalk.gray("‚åõ ƒê·ª£i 5 gi√¢y tr∆∞·ªõc giao d·ªãch ti·∫øp theo...\n"));
        await new Promise(res => setTimeout(res, 5000));
    }

    console.log(chalk.greenBright("\nüéâ T·∫•t c·∫£ giao d·ªãch ƒë√£ ho√†n t·∫•t! Ch·∫°y l·∫°i sau 24 gi·ªù.\n"));
    setTimeout(autoTransaction, 10000); // Kh·ªüi ƒë·ªông l·∫°i sau 24 gi·ªù
}

// H√†m x·ª≠ l√Ω ƒë·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng
async function askQuestion(query) {
    process.stdout.write(chalk.yellow(query));
    return new Promise(resolve => {
        process.stdin.once("data", data => resolve(data.toString().trim()));
    });
}

// H√†m x·ª≠ l√Ω ch√≠nh
async function startProcess() {
    showBanner();
    await showWalletInfo();

    console.log(chalk.magenta("\nCh·ªçn t√πy ch·ªçn:"));
    console.log(chalk.yellow("1: Tri·ªÉn khai h·ª£p ƒë·ªìng (Ch·ªâ m·ªôt l·∫ßn)"));
    console.log(chalk.yellow("2: Giao d·ªãch t·ª± ƒë·ªông (L·∫∑p l·∫°i m·ªói 24 gi·ªù)"));

    const choice = await askQuestion("Ch·ªçn: ");

    if (choice === "1") {
        await deployContract();
    } else if (choice === "2") {
        await autoTransaction();
    } else {
        console.log(chalk.red("‚ùå T√πy ch·ªçn kh√¥ng h·ª£p l·ªá! Kh·ªüi ƒë·ªông l·∫°i..."));
        setTimeout(startProcess, 3000);
    }
}

// B·∫Øt ƒë·∫ßu qu√° tr√¨nh
startProcess();